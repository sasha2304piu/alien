{
	"info": {
		"_postman_id": "cdccb4cb-29b6-4735-8a4a-6b528366524c",
		"name": "group 29",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "HW_postman_1",
			"item": [
				{
					"name": "EP_1",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/get_method?name=A&age=66",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"get_method"
							],
							"query": [
								{
									"key": "name",
									"value": "A"
								},
								{
									"key": "age",
									"value": "66"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_2",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "sas",
									"type": "default"
								},
								{
									"key": "age",
									"value": "44",
									"type": "default"
								},
								{
									"key": "salary",
									"value": "100",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_3",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_3",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_1?name=dre&age=33&weight=99",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_1"
							],
							"query": [
								{
									"key": "name",
									"value": "dre"
								},
								{
									"key": "age",
									"value": "33"
								},
								{
									"key": "weight",
									"value": "99"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_4",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_2?name=fre&age=55&salary=100",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_2"
							],
							"query": [
								{
									"key": "name",
									"value": "fre"
								},
								{
									"key": "age",
									"value": "55"
								},
								{
									"key": "salary",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_5",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_3?name=tre&age=42&salary=1233",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "tre"
								},
								{
									"key": "age",
									"value": "42"
								},
								{
									"key": "salary",
									"value": "1233"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_6",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}object_info_4?name=fyt&age=22&salary=500",
							"host": [
								"{{url}}object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "fyt"
								},
								{
									"key": "age",
									"value": "22"
								},
								{
									"key": "salary",
									"value": "500"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_7",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "art",
									"type": "default"
								},
								{
									"key": "age",
									"value": "54",
									"type": "default"
								},
								{
									"key": "salary",
									"value": "900",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "{{url}}user_info_2",
							"host": [
								"{{url}}user_info_2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "HW_postman_2",
			"item": [
				{
					"name": "first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1. Отправить запрос\r",
									"//2. Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//3. Проверить, что в body приходит правильный string\r",
									"\r",
									"pm.test(\"StringCheck\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
									"});//не отрабатывает негативный сценарий\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\");\r",
									"});//так тоже вполне проходит\r",
									"\r",
									"pm.test(\"StringCheck\", () => {\r",
									"    pm.response.to.be.body(\"This is the first responce from server!\");\r",
									"})\r",
									"\r",
									"pm.test(\"StringCheck\", () => {\r",
									"    pm.expect(pm.response.text()).to.eql(\"This is the first responce from server!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/first",
							"host": [
								"{{url}}"
							],
							"path": [
								"first"
							]
						}
					},
					"response": []
				},
				{
					"name": "user_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1. Отправить запрос.\r",
									"//2. Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//3. Спарсить response body в json.\r",
									"let jsonDataResp = pm.response.json();\r",
									"\r",
									"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
									"pm.test(\"NameCheckMan\", () => {\r",
									"    //var jsonData = pm.response.json();\r",
									"    pm.expect(jsonDataResp.name).be.eql(\"Alex\");\r",
									"});\r",
									"\r",
									"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
									"pm.test(\"AgeCheckMan\", () => {\r",
									"    //var jsonData = pm.response.json();\r",
									"    pm.expect(+jsonDataResp.age).to.eql(41);\r",
									"});\r",
									"\r",
									"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
									"pm.test(\"SalaryCheckMan\", () => {\r",
									"    pm.expect(jsonDataResp.salary).have.eql(1500);\r",
									"});\r",
									"\r",
									"//7. Спарсить request.\r",
									"let DataReq = request.data;\r",
									"console.log(DataReq)\r",
									"\r",
									"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test(\"NameCheck\", () => {\r",
									"    pm.expect(jsonDataResp.name).be.eql(DataReq.name);\r",
									"});\r",
									"\r",
									"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
									"pm.test(\"AgeCheck\", () => {\r",
									"    pm.expect(+jsonDataResp.age).to.eql(+DataReq.age);\r",
									"});\r",
									"\r",
									"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
									"pm.test(\"SalaryCheck\", () => {\r",
									"    pm.expect(+jsonDataResp.salary).have.eql(+DataReq.salary);\r",
									"});\r",
									"\r",
									"//11. Вывести в консоль параметр family из response.\r",
									"console.log(jsonDataResp.family);\r",
									"\r",
									"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
									"pm.test(\"CheckSalary15y\", () => {\r",
									"    pm.expect(jsonDataResp.family.u_salary_1_5_year).to.eql(DataReq.salary*4);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "default"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "default"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_3",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_3"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								},
								{
									"key": "",
									"value": null,
									"disabled": true
								},
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "object_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1. Отправить запрос.\r",
									"//2. Статус код 200\r",
									"pm.test(\"code is 200\", () => {\r",
									"    pm.response.to.be.status(200);\r",
									"});\r",
									"\r",
									"//3. Спарсить response body в json.\r",
									"let jsonData = pm.response.json();\r",
									"//console.log(jsonData)\r",
									"\r",
									"//4. Спарсить request.\r",
									"let req = pm.request.url.query.toObject();\r",
									"//console.log(req)\r",
									"\r",
									"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test(\"CheckName\", () => {\r",
									"    pm.expect(jsonData.name).to.be.eql(req.name);\r",
									"});\r",
									"\r",
									"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
									"pm.test(\"CheckAge\", () => {\r",
									"    pm.expect(+jsonData.age).to.have.eql(+req.age);\r",
									"});\r",
									"\r",
									"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
									"pm.test(\"CheckSalary\", () => {\r",
									"    pm.expect(+jsonData.salary).to.been.eql(+req.salary);\r",
									"});\r",
									"\r",
									"//8. Вывести в консоль параметр family из response.\r",
									"console.log(jsonData.family);\r",
									"\r",
									"//9. Проверить, что у параметра dog есть параметры name.\r",
									"pm.test(\"CheckDogName\", () => {\r",
									"    pm.expect(jsonData.family.pets.dog).haveOwnProperty(\"name\");\r",
									"});\r",
									"\r",
									"//10. Проверить, что у параметра dog есть параметры age.\r",
									"pm.test(\"CheckDogAge\", () => {\r",
									"    pm.expect(jsonData.family.pets.dog).haveOwnProperty(\"age\");\r",
									"});\r",
									"\r",
									"//11. Проверить, что параметр name имеет значение Luky.\r",
									"pm.test(\"CheckDogNameLuky\", () => {\r",
									"    pm.expect(jsonData.family.pets.dog.name).be.eql(\"Luky\");\r",
									"});\r",
									"\r",
									"//12. Проверить, что параметр age имеет значение 4.\r",
									"pm.test(\"CheckDogAge\", () => {\r",
									"    pm.expect(+jsonData.family.pets.dog.age).be.eql(4);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"value": "",
									"type": "default",
									"disabled": true
								},
								{
									"key": "",
									"value": "",
									"type": "default",
									"disabled": true
								},
								{
									"key": "",
									"value": "",
									"type": "default",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{url}}/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "{{name}}"
								},
								{
									"key": "age",
									"value": "{{age}}"
								},
								{
									"key": "salary",
									"value": "{{salary}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "object_info_4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1. Отправить запрос.\r",
									"//2. Статус код 200\r",
									"pm.test(\"code 200\", () => {\r",
									"    pm.response.to.be.status(200);\r",
									"});\r",
									"\r",
									"//3. Спарсить response body в json.\r",
									"let jsonData = pm.response.json();\r",
									"//console.log(jsonData)\r",
									"\r",
									"//4. Спарсить request.\r",
									"let req = pm.request.url.query.toObject();\r",
									"//console.log(req);\r",
									"\r",
									"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test(\"CheckName\", () => {\r",
									"    pm.expect(jsonData.name).be.eql(req.name);\r",
									"});\r",
									"\r",
									"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
									"pm.test(\"CheckAge\", () => {\r",
									"    pm.expect(+jsonData.age).have.eql(+req.age);\r",
									"});\r",
									"\r",
									"//7. Вывести в консоль параметр salary из request.\r",
									"console.log(+req.salary);\r",
									"\r",
									"//8. Вывести в консоль параметр salary из response.\r",
									"console.log(jsonData.salary);\r",
									"\r",
									"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
									"console.log(jsonData.salary[0]);\r",
									"\r",
									"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
									"console.log(jsonData.salary[1]);\r",
									"\r",
									"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
									"console.log(jsonData.salary[2]);\r",
									"\r",
									"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
									"pm.test('checkSalary1', () => {\r",
									"    pm.expect(+jsonData.salary[0]).have.eql(+req.salary);\r",
									"});\r",
									"\r",
									"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
									"pm.test('checkSalary2', () => {\r",
									"    pm.expect(+jsonData.salary[1]).be.eql(+req.salary*2);\r",
									"});\r",
									"\r",
									"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
									"pm.test('checkSalary3', () => {\r",
									"    pm.expect(+jsonData.salary[2]).be.eql(+req.salary*3);\r",
									"});\r",
									"\r",
									"//15. Создать в окружении переменную name2\r",
									"pm.environment.set(\"name2\");\r",
									"\r",
									"//16. Создать в окружении переменную age2\r",
									"pm.environment.set(\"age2\");\r",
									"\r",
									"//17. Создать в окружении переменную salary2\r",
									"pm.environment.set('salary2');\r",
									"\r",
									"//18. Передать в окружение переменную name2\r",
									"pm.environment.set('name2', req.name);\r",
									"\r",
									"//19. Передать в окружение переменную age\r",
									"pm.environment.set('age2', req.age);\r",
									"\r",
									"//20. Передать в окружение переменную salary\r",
									"pm.environment.set('salary2', req.salary);\r",
									"\r",
									"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
									"jsonData.salary.forEach((el) => {\r",
									"    console.log(el);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_4?name=Alex&age=41&salary=1500",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "Alex"
								},
								{
									"key": "age",
									"value": "41"
								},
								{
									"key": "salary",
									"value": "1500"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user_info_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//5. Статус код 200\r",
									"pm.test('code 200', () => {\r",
									"    pm.response.to.be.status(200);\r",
									"})\r",
									"\r",
									"//6. Спарсить response body в json.\r",
									"let respData = pm.response.json()\r",
									"//let respData = JSON.parse(responseBody)\r",
									"//console.log(respData)\r",
									"\r",
									"//7. Спарсить request.\r",
									"let req = request.data\r",
									"console.log(req)\r",
									"\r",
									"//8. Проверить, что json response имеет параметр start_qa_salary\r",
									"pm.test('start', () => {\r",
									"pm.expect(respData).have.property('start_qa_salary')\r",
									"})\r",
									"\r",
									"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
									"pm.test('6_months', () => {\r",
									"    pm.expect(respData).to.property('qa_salary_after_6_months')\r",
									"})\r",
									"\r",
									"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
									"pm.test('12_months', () => {\r",
									"    pm.expect(respData).be.property('qa_salary_after_12_months')\r",
									"})\r",
									"\r",
									"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
									"pm.test('1.5_year', () => {\r",
									"    pm.expect(respData).be.property('qa_salary_after_1.5_year')\r",
									"})\r",
									"\r",
									"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
									"pm.test('3.5_years', () => {\r",
									"    pm.expect(respData).be.property('qa_salary_after_3.5_years')\r",
									"})\r",
									"\r",
									"//13. Проверить, что json response имеет параметр person\r",
									"pm.test('person', () => {\r",
									"    pm.expect(respData).be.property('person')\r",
									"})\r",
									"\r",
									"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
									"pm.test('start=salary', () => {\r",
									"    pm.expect(+respData.start_qa_salary).to.eql(+req.salary)\r",
									"})\r",
									"\r",
									"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
									"pm.test('checkSalary6', () => {\r",
									"    pm.expect(+respData.qa_salary_after_6_months).to.eql(+req.salary*2)\r",
									"})\r",
									"\r",
									"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
									"pm.test('checkSalary12', () => {\r",
									"    pm.expect(+respData.qa_salary_after_12_months).to.eql(+req.salary*2.7)\r",
									"})\r",
									"\r",
									"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
									"pm.test('checkSalary1.5', () => {\r",
									"    pm.expect(+respData['qa_salary_after_1.5_year']).to.eql(+req.salary*3.3)\r",
									"})\r",
									"\r",
									"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
									"pm.test('checkSalary3.5', () => {\r",
									"    pm.expect(+respData['qa_salary_after_3.5_years']).to.eql(+req.salary*3.8)\r",
									"})\r",
									"\r",
									"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
									"pm.test('person.u_name[1]=salary', () => {\r",
									"    pm.expect(+respData.person['u_name'][1]).to.eql(+req.salary)\r",
									"})\r",
									"\r",
									"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
									"pm.test('person.u_age=age', () => {\r",
									"    pm.expect(+respData.person['u_age']).to.eql(+req.age)\r",
									"})\r",
									"\r",
									"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
									"pm.test('person.u_salary5', () => {\r",
									"    pm.expect(+respData.person['u_salary_5_years']).to.eql(+req.salary*4.2)\r",
									"})\r",
									"\r",
									"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
									"\r",
									"for (let key in respData.person) {\r",
									"    console.log(key, respData.person[key])\r",
									"}\r",
									"//или\r",
									"Object.entries(respData.person).forEach((el) => {\r",
									"    console.log(el);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "default"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "default"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_2",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}